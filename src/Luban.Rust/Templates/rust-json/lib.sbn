pub mod prelude{
    pub use crate::*;
{{~ for ns in __ns ~}}
    pub use {{ns}}::*;
{{~end~}}
}
{{~ if __polymorphic_beans.count != 0 ~}}

type AbstractBase = dyn std::any::Any + Sync + Send;

pub trait GetBase<'a, T> {
    fn get_base(&'a self) -> T;
}

macro_rules! try_from {
    ($($t:ty),+) => {
        $(
            impl<'a> TryFrom<&'a AbstractBase> for &'a $t {
                type Error = String;

                fn try_from(value: &'a AbstractBase) -> Result<Self, Self::Error> {
                    let r = value.downcast_ref::<$t>();
                    if let Some(v) = r {
                        return Ok(v);
                    }

                    Err(concat!("can not into to ", stringify!($t)).to_string())
                }
            }
        )+
    };
}

try_from!( {{array.each __polymorphic_beans @full_name | array.join ", "}});
{{~end~}}

pub struct Tables{
{{~ for table in __tables ~}}
    pub {{table.name}}: std::sync::Arc<{{full_name table}}>,
{{~end~}}
}

impl Tables {
    pub fn new<T: Fn(&str) -> serde_json::Value>(loader: T) -> Tables {
        Tables {
{{~ for table in __tables ~}}
            {{table.name}}: {{full_name table}}::new(&loader("{{table.output_data_file}}")),
{{~end~}}
        }
    }
}