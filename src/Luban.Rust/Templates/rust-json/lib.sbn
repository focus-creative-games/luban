pub mod prelude{
    pub use crate::*;
{{~ for ns in __ns ~}}
    pub use {{ns}}::*;
{{~end~}}
}
{{~ if __polymorphic_beans.count != 0 ~}}

type AbstractBase = dyn std::any::Any + Sync + Send;

pub trait GetBase<'a, T> {
    fn get_base(&'a self) -> Result<T, LubanError>;
}

#[macro_export]
macro_rules! base_try_from {
    ($($t:ty),+) => {
        $(
            impl<'a> TryFrom<&'a AbstractBase> for &'a $t {
                type Error = String;

                fn try_from(value: &'a AbstractBase) -> Result<Self, Self::Error> {
                    let r = value.downcast_ref::<$t>();
                    if let Some(v) = r {
                        return Ok(v);
                    }

                    Err(concat!("can not into to ", stringify!($t)).to_string())
                }
            }
        )+
    };
}

#[macro_export]
macro_rules! enum_from_num {
    ($t:ty) => {
        enum_from_num!($t, i64, i16, i8, u64, u32, u16, u8, f64, f32);
    };
    ($t:ty,$($num:ty),+) => {
        $(
            impl From<$num> for $t {
                fn from(value: $num) -> Self {
                    (value as i32).into()
                }
            }
        )+
    };
}

base_try_from!( {{array.each __polymorphic_beans @full_name | array.join ", "}});
{{~end~}}

#[derive(Debug)]
pub enum LubanError {
    Loader(String),
    Table(String),
    Bean(String),
    Polymorphic(String),
    Unknown(String),
}

impl std::fmt::Display for LubanError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            LubanError::Loader(msg) |
            LubanError::Table(msg) |
            LubanError::Bean(msg) |
            LubanError::Polymorphic(msg) |
            LubanError::Unknown(msg) => msg,
        })
    }
}

pub struct Tables{
{{~ for table in __tables ~}}
    pub {{table.name}}: std::sync::Arc<{{full_name table}}>,
{{~end~}}
}

impl Tables {
    pub fn new<T: Fn(&str) -> Result<serde_json::Value, LubanError>>(loader: T) -> Result<Tables, LubanError> {
        Ok(Tables {
{{~ for table in __tables ~}}
            {{table.name}}: {{full_name table}}::new(&loader("{{table.output_data_file}}")?)?,
{{~end~}}
        })
    }
}