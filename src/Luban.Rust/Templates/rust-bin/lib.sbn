pub mod prelude {
    pub use crate::*;
{{~ for ns in __ns ~}}
    pub use {{ns}}::*;
{{~end~}}
}

#[derive(Debug)]
pub enum LubanError {
    Loader(String),
    Table(String),
    Bean(String),
    Polymorphic(String),
    Unknown(String),
}

impl std::fmt::Display for LubanError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            LubanError::Loader(msg) |
            LubanError::Table(msg) |
            LubanError::Bean(msg) |
            LubanError::Polymorphic(msg) |
            LubanError::Unknown(msg) => msg,
        })
    }
}

pub struct {{__name}}{
{{~ for table in __tables ~}}
    pub {{table.name}}: std::sync::Arc<{{full_name table}}>,
{{~end~}}
}

impl {{__name}} {
    pub fn new<T: Fn(&str) -> Result<ByteBuf, LubanError>>(loader: T) -> Result<{{__name}}, LubanError> {
        let mut tables = {{~__name~}} {
{{~ for table in __tables ~}}
            {{table.name}}: {{full_name table}}::new(loader("{{table.output_data_file}}")?)?,
{{~end~}}
        };
        unsafe { tables.resolve_ref(); }
        Ok(tables)
    }

    unsafe fn resolve_ref(&mut self) {
{{~ for table in __tables ~}}
        let mut b = Box::from_raw(self.{{table.name}}.as_ref() as *const {{full_name table}} as *mut {{full_name table}}); b.as_mut().resolve_ref(self); let _ = Box::into_raw(b);
{{~end~}}
    }
}