## 所有配置表导出的管理类（包括枚举，数据类Bean，单行数据类组合而成的表格数据类Table，以及表格数据类组合而成的表格管理类Tables）
@tool
class_name Schema
extends RefCounted


{{~for enum in __enums~}}
{{~if enum.comment != '' ~}}
## {{enum.comment | html.escape}}
{{~end~}}
enum {{full_name enum}}
{
    {{~ for item in enum.items ~}}
    {{~if item.comment_or_alias != '' ~}}
    ## {{item.comment_or_alias | html.escape}}
    {{~end~}}
    {{item.name}} = {{item.value}},
    {{~end~}}
}


{{~end~}}
{{~for bean in __beans
    name = (full_name bean)
~}}
{{~if bean.comment != '' ~}}
## {{bean.comment | html.escape}}
{{~end~}}
class {{name}}{{if bean.parent_def_type}} extends {{full_name bean.parent_def_type}}{{end}}:
{{~ for field in bean.export_fields ~}}
    {{~if field.comment != '' ~}}
    ## {{field.comment | html.escape}}
    {{~end~}}
    var {{format_field_name __code_style field.name}}: {{declaring_type_name field.ctype}}
{{~end~}}

{{~if bean.is_abstract_type~}}
    static func fromJson(_json_):
        var type = _json_['$type']
        match type:
        {{~ for child in bean.hierarchy_not_abstract_children~}}
            "{{impl_data_type child bean}}": return {{full_name child}}.new(_json_)
        {{~end~}}
            _: assert(false)

{{~end~}}
    func _init(_json_) -> void:
{{~if bean.parent_def_type~}}
        super(_json_)
{{~end~}}
        {{~ for field in bean.export_fields ~}}
        {{deserialize_field ('self.' + (format_field_name __code_style field.name)) '_json_' field.name field.ctype}}
        {{~end~}}
        {{~if bean.export_fields.empty?~}}
        pass
        {{~end~}}


{{~end~}}
{{~for table in __tables
    value_type = table.value_ttype
    value_type_name = (declaring_type_name value_type)
~}}
{{~if table.comment != '' ~}}
## {{table.comment | html.escape}}
{{~end~}}
class {{full_name table}}:
    {{~if table.is_map_table ~}}
    ## 数据数组
    var _data_list: Array[{{value_type_name}}]
    ## 数据字典
    var _data_map: Dictionary
    
    func _init(_json_) -> void:
        for _json2_ in _json_:
            var _v: {{value_type_name}}
            {{deserialize '_v' '_json2_' value_type}}
            self._data_list.append(_v)
            self._data_map[_v.{{format_field_name __code_style table.index_field.name}}] = _v

    ## 获取数据数组
    func get_data_list() -> Array[{{value_type_name}}]:
        return self._data_list

    ## 获取数据字典
    func get_data_map() -> Dictionary:
        return self._data_map

    ## 获取键值对应的行数据对象
    func get_item(key) -> {{value_type_name}}:
        return self._data_map.get(key)

    {{~else if table.multi_key ~}}
    ## 数据数组
    var _data_list: Array[{{value_type_name}}]
    ## 数据字典
    var _data_map: Dictionary
    {{~ for INDEX in table.index_list ~}}
    var _{{INDEX.index_field.name}}_data_map: Dictionary ## 以{{INDEX.index_field.name}}为key的数据字典
    {{~ end ~}} 

    func _init(_json_) -> void:
        {{~ for INDEX in table.index_list ~}}
        self._{{INDEX.index_field.name}}_data_map = {}
        {{~ end ~}}
    
        for _json2_ in _json_:
            var _v: {{value_type_name}}
            {{deserialize '_v' '_json2_' value_type}}
            self._data_list.append(_v)
            self._data_map[_v.{{format_field_name __code_style table.index_field.name}}] = _v
        {{~ for INDEX in table.index_list ~}}
            self._{{INDEX.index_field.name}}_data_map[_v.{{INDEX.index_field.name}}] = _v
        {{~ end ~}}

    ## 获取数据数组
    func get_data_list() -> Array[{{value_type_name}}]:
        return self._data_list

    ## 获取数据字典
    func get_data_map() -> Dictionary:
        return self._data_map

    {{~ for INDEX in table.index_list ~}}
    ## 获取以{{INDEX.index_field.name}}为key的数据字典
    func get_{{INDEX.index_field.name}}_data_map() -> Dictionary:
        return self._{{INDEX.index_field.name}}_data_map

    {{~ end ~}}
    ## 通过默认key获取行数据对象
    func get_item(key) -> {{value_type_name}}:
        return self._data_map.get(key)

{{~ for INDEX in table.index_list ~}}
    ## 通过{{INDEX.index_field.name}}获取行数据对象
    func get_item_by_{{INDEX.index_field.name}}({{INDEX.index_field.name}}) -> {{value_type_name}}:
        return self._{{INDEX.index_field.name}}_data_map.get({{INDEX.index_field.name}})

{{~ end ~}}
    {{~else if table.is_list_table ~}}
    var _data_list: Array[{{value_type_name}}] ## 数据数组
    
    func _init(_json_) -> void:
        for _json2_ in _json_:
            var _v: {{value_type_name}}
            {{deserialize '_v' '_json2_' value_type}}
            self._data_list.append(_v)

    ## 获取数据数组
    func get_data_list() -> Array[{{value_type_name}}]:
        return self._data_list
    
    ## 通过序号获取行数据对象
    func get_item(index) -> {{value_type_name}}:
        return self._data_list[index]
    {{~else~}}
    ## 单例数据对象
    var _data:{{value_type_name}}
    
    func _init(_json_) -> void:
        assert(len(_json_) == 1, "table mode = one, but size != 1")
        {{deserialize 'self._data' '_json_[0]' value_type}}

    ## 获取单例数据对象
    func get_data() -> {{value_type_name}}:
        return self._data

    {{~ for field in value_type.def_bean.hierarchy_export_fields
     name = format_field_name __code_style field.name
     ~}}
{{~if field.comment != '' ~}}
    ## {{escape_comment field.comment}}
{{~end~}}
    var {{name}}: {{declaring_type_name field.ctype}}:
        get: return self._data.{{name}}

    {{~end~}}
    {{~end~}}

{{~end~}}
## 表格管理类：表格数据类组合而成，通过实例化此类进行各配置表数据的访问
class {{str_full_name __full_name}}:
    {{~for table in __tables ~}}
    {{~if table.comment != ''~}}
    ## {{table.comment | html.escape}}
    {{~end~}}
    var {{format_method_name __code_style table.name}}: {{full_name table}}
    {{~end~}}
    
    func _init(loader: Callable) -> void:
        {{~for table in __tables ~}}
        self.{{format_method_name __code_style table.name}} = {{full_name table}}.new(loader.call('{{table.output_data_file}}'))
        {{~end~}}