using Google.Protobuf;
using Google.Protobuf.Collections;
using System.Reflection;

{{namespace_with_grace_begin __namespace}}
public partial class {{__name}}
{
    {{~for table in __tables ~}}
{{~if table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment table.comment}}
    /// </summary>
{{~end~}}
    public {{proto_full_name table.full_name}} {{format_property_name __code_style table.name}} { get; }

    {{~end~}}

    public {{__name}}(System.Func<string, byte[]> loader)
    {
        {{~for table in __tables ~}}
        {{format_property_name __code_style table.name}} = {{proto_full_name table.full_name}}.Parser.ParseFrom(loader("{{table.output_data_file}}"));
        {{~end~}}

        ResolveRef();
    }

    Dictionary<Type, Dictionary<int, IMessage>> allTypesCfg;
    Dictionary<Type, IMessage> instanceCfg;
    void ResolveRef()
    {
        allTypesCfg = new Dictionary<Type, Dictionary<int, IMessage>>();
        instanceCfg = new Dictionary<Type, IMessage>();

        {{~for table in __tables ~}}
        ResolveMsg({{format_property_name __code_style table.name}}.DataList);
        {{~end~}}
    }

    void ResolveMsg<T>(RepeatedField<T> dataList) where T : IMessage
    {
        var type = typeof(T);

        var idProperty = type.GetProperty("Id", BindingFlags.Public | BindingFlags.Instance);

        if (idProperty != null)
        {
            var dic = new Dictionary<int, IMessage>(dataList.Count);
            foreach (var item in dataList)
            {
                var id = (int)idProperty.GetValue(item);
                dic[id] = item;
            }
            allTypesCfg.Add(type, dic);
         }
         else
        {
            instanceCfg.Add(type, dataList[0]);
        }
    }
    public T Get<T>(int? id = null) where T : class, IMessage
    {
        var type = typeof(T);

        if (id != null)
        {
            if (!allTypesCfg.TryGetValue(type, out var cfgDic))
            {
                return null;
            }
            if (!cfgDic.TryGetValue((int)id, out IMessage cfgObj))
            {
                return null;
            }
            return cfgObj as T;
        }
        else
        {
            if (!instanceCfg.TryGetValue(type, out IMessage cfgObj))
            {
                return null;
            }
            return cfgObj as T;
        }
    }
    public Dictionary<int, IMessage> GetAll<T>() where T : class, IMessage
    {
        var type = typeof(T);
        if (allTypesCfg.TryGetValue(type, out var dic))
        {
            return dic;
        }
        return null;
    }
}

{{namespace_with_grace_end __namespace}}
