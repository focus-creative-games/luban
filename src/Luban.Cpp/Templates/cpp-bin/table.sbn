#include "{{to_snake_case __this.value_type}}.h"
#include "TableBase.h"

{{namespace_with_grace_begin __namespace_with_top_module}}

{{~if __this.comment != '' ~}}
/**
 * {{escape_comment __this.comment}}
 */
{{~end~}}

class {{__name}} : public ::luban::TableBase
{
    {{~if __this.is_map_table ~}}
private:
    ::luban::HashMap<{{declaring_type_name __key_type}}, {{declaring_type_name __value_type}}*> _dataMap;
    ::luban::Vector<{{declaring_type_name __value_type}}> _dataList;
    
public:
    bool load(::luban::ByteBuf& _buf)
    {        
        int n;
        if (!_buf.readSize(n)) return false;
        _dataList.resize(n);
        _dataMap.rehash(n);
        for(int i = 0; i < n ; ++i)
        {
            {{declaring_type_name __value_type}}& _v = _dataList[i];
            {{deserialize '_buf' '_v' __value_type}}
            _dataMap[_v.{{format_field_name __code_style __this.index_field.name}}] = std::addressof(_v);
        }
        return true;
    }

    const ::luban::HashMap<{{declaring_type_name __key_type}}, {{declaring_type_name __value_type}}*>& getDataMap() const { return _dataMap; }
    const ::luban::Vector<{{declaring_type_name __value_type}}>& getDataList() const { return _dataList; }

    const {{declaring_type_name __value_type}}* get({{declaring_type_name __key_type}} key)
    { 
        auto it = _dataMap.find(key);
        return it != _dataMap.end() ? it->second : nullptr;
    }

    {{~else if __this.is_list_table~}}
private:
    ::luban::Vector<{{declaring_type_name __value_type}}> _dataList;
{{~if __this.is_union_index~}}

{{~else if !__this.index_list.empty?~}}
    {{~for idx in __this.index_list~}}
    ::luban::HashMap<{{declaring_type_name idx.type}}, {{declaring_type_name __value_type}}*> _dataMap_{{idx.index_field.name}};
    {{~end~}}
{{~else~}}
{{~end~}}    
    
public:
    bool load(::luban::ByteBuf& _buf)
    {        
        int n;
        if (!_buf.readSize(n)) return false;
        _dataList.resize(n);
        for(int i = 0; i < n ; ++i)
        {
            {{declaring_type_name __value_type}}& _v = _dataList[i];
            {{deserialize '_buf' '_v' __value_type}}
            {{~if __this.is_union_index~}}

            {{~else if !__this.index_list.empty?~}}
            {{~for idx in __this.index_list~}}
            _dataMap_{{idx.index_field.name}}[_v.{{idx.index_field.name}}] = std::addressof(_v);
            {{~end~}}
            {{~else~}}
            {{~end~}}
        }
        return true;
    }

    const ::luban::Vector<{{declaring_type_name __value_type}}>& getDataList() const { return _dataList; }

{{~if __this.is_union_index~}}

{{~else if !__this.index_list.empty?~}}
{{~for idx in __this.index_list~}}
    ::luban::HashMap<{{declaring_type_name idx.type}}, {{declaring_type_name __value_type}}*>& getDataMapBy{{idx.index_field.name}}()
    {
        return _dataMap_{{idx.index_field.name}};
    }

    const {{declaring_type_name __value_type}}* getBy{{idx.index_field.name}}({{declaring_type_name idx.type}} key)
    {
        auto it = _dataMap_{{idx.index_field.name}}.find(key);
        return it != _dataMap_{{idx.index_field.name}}.end() ? it->second : nullptr;
    }
{{~end~}}
{{~else~}}
    const {{declaring_type_name __value_type}}* get(size_t index) const
    { 
        return std::addressof(_dataList[index]);
    }
{{~end~}}
{{~else~}}
private:
    {{declaring_type_name __value_type}} _data;

public:
    {{declaring_type_name __value_type}} data() const { return _data; }

    bool load(::luban::ByteBuf& _buf)
    {
        int n;
        if (!_buf.readSize(n)) return false;
        if (n != 1) return false;
        {{deserialize '_buf' '_data' __value_type}}
        return true;
    }


    {{~ for field in __value_type.def_bean.hierarchy_export_fields ~}}
{{~if field.comment != '' ~}}
    /**
     * {{escape_comment field.comment}}
     */
{{~end~}}
    {{declaring_type_name field.ctype}}& {{getter_name field.name}}() const { return _data->{{format_field_name __code_style field.name}}; }
    {{~end~}}
    {{~end~}}
    
public:
    static constexpr const char* __OUTPUT_FILE_NAME__ = "{{__this.output_data_file}}";
    static constexpr ::luban::int32 __ID__ = {{get_id_by_full_name __this.full_name}};
   
    const char* getOutputDataFile() const override { return __OUTPUT_FILE_NAME__; }
    int getTypeId() const override { return __ID__; }
};
{{namespace_with_grace_end __namespace_with_top_module}}
